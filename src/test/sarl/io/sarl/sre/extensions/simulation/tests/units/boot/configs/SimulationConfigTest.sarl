/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.extensions.simulation.tests.units.boot.configs

import io.bootique.config.ConfigurationFactory
import io.sarl.sre.extensions.simulation.boot.configs.SimulationConfig
import io.sarl.tests.api.AbstractSarlTest
import io.sarl.tests.api.Nullable
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("all")
class SimulationKernelFactoryTest extends AbstractSarlTest {

	@Nullable
	var config : SimulationConfig
	
	@Before
	def setUp : void {
		this.config = new SimulationConfig
	}
	
	@Test
	def getConfiguration : void {
		var factory = typeof(ConfigurationFactory).mock
		var cfg = typeof(SimulationConfig).mock
		when(factory.config(typeof(Class).any, anyString)).thenReturn(cfg)
		cfg.assertSame(SimulationConfig::getConfiguration(factory))
		var arg0 = ArgumentCaptor::forClass(typeof(Class))
		var arg1 = ArgumentCaptor::forClass(typeof(String))
		factory.verify(only).config(arg0.capture, arg1.capture)
		typeof(SimulationConfig).assertEquals(arg0.value)
		SimulationConfig::PREFIX.assertEquals(arg1.value)
	}

	@Test
	def isAutostart : void {
		this.config.isAutostart.assertTrue
	}

	@Test
	def setAutostart : void {
		this.config.autostart.assertTrue
		this.config.autostart = false
		this.config.autostart.assertFalse
		this.config.autostart = true
		this.config.autostart.assertTrue
	}

}
