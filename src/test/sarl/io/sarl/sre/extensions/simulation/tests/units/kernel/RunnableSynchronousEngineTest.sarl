/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.extensions.simulation.tests.units.kernel

import io.sarl.lang.core.Agent
import io.sarl.sre.extensions.simulation.boot.configs.TimeConfig
import io.sarl.sre.extensions.simulation.kernel.RunnableSynchronousEngine
import io.sarl.sre.extensions.simulation.kernel.SynchronousEngineExternalController
import io.sarl.sre.extensions.simulation.schedule.AgentScheduler
import io.sarl.sre.extensions.simulation.services.executor.SynchronousExecutorService
import io.sarl.sre.extensions.simulation.services.lifecycle.SimulationLifecycleService
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.services.time.TimeService
import io.sarl.sre.tests.testutils.mockito.NativeDoubleArgumentCaptor
import io.sarl.tests.api.AbstractSarlTest
import io.sarl.util.concurrent.NoReadWriteLock
import java.util.Iterator
import java.util.concurrent.atomic.AtomicBoolean
import java.util.logging.Logger
import org.eclipse.xtext.util.internal.Nullable
import org.junit.Before
import org.junit.Test

import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("all")
class RunnableSynchronousEngineTest extends AbstractSarlTest {

	@Nullable
	var engine : RunnableSynchronousEngine

	@Nullable
	var timeConfig : TimeConfig

	@Nullable
	var agentScheduler : AgentScheduler

	@Nullable
	var lifecycleService : SimulationLifecycleService

	@Nullable
	var timeService : TimeService

	@Nullable
	var loggingService : LoggingService

	@Nullable
	var externalController : SynchronousEngineExternalController

	@Nullable
	var agents : Iterable<Agent>

	@Before
	def setUp : void {
		this.agentScheduler = typeof(AgentScheduler).mock
		when(this.agentScheduler.schedule(typeof(Iterable).any)).thenAnswer [
			(it.getArgument(0) as Iterable<? extends Agent>).iterator
		]
		
		var iterator = typeof(Iterator).mock
		when(iterator.hasNext).thenReturn(false)
		this.agents = typeof(Iterable).mock
		when(this.agents.iterator).thenReturn(iterator)

		this.timeConfig = typeof(TimeConfig).mock
		when(this.timeConfig.startTime).thenReturn(12.34)
		when(this.timeConfig.timeStep).thenReturn(90.12)

		this.lifecycleService = typeof(SimulationLifecycleService).mock
		val bool = new AtomicBoolean(true)
		when(this.lifecycleService.hasAgent).thenAnswer [ bool.getAndSet(false) ]
		when(this.lifecycleService.agents).thenReturn(this.agents)

		this.timeService = typeof(TimeService).mock

		var logger = typeof(Logger).mock
		this.loggingService = typeof(LoggingService).mock
		when(this.loggingService.kernelLogger).thenReturn(logger)

		this.externalController = typeof(SynchronousEngineExternalController).mock
		when(this.externalController.isRunning).thenReturn(true)
		when(this.externalController.isStopped).thenReturn(false)

		this.engine = new RunnableSynchronousEngine(
			this.agentScheduler, this.timeService, this.timeConfig,
			this.lifecycleService, typeof(SynchronousExecutorService).mock,
			this.loggingService,
			[NoReadWriteLock::SINGLETON],
			this.externalController)
	}

	protected def applyDelay {
		when(this.timeConfig.simulationLoopDelay).thenReturn(1l)
	}

	protected def applyNoDelay {
		when(this.timeConfig.simulationLoopDelay).thenReturn(0l)
	}

	@Test
	def run_delay {
		applyDelay

		this.engine.run

		this.lifecycleService.verify(1.times).synchronizeAgentList

		var doubleArg = NativeDoubleArgumentCaptor::forPrimitive
		this.timeService.verify(1.times).evolveTimeIfPossible(doubleArg.capture)
		90.12.assertEpsilonEquals(doubleArg.value)

		doubleArg = NativeDoubleArgumentCaptor::forPrimitive
		this.timeService.verify(1.times).setTimeIfPossible(doubleArg.capture)
		12.34.assertEpsilonEquals(doubleArg.value as double)
	}

	@Test
	def run_noDelay {
		applyNoDelay

		this.engine.run

		this.lifecycleService.verify(1.times).synchronizeAgentList

		var doubleArg = NativeDoubleArgumentCaptor::forPrimitive
		var r = this.timeService.verify(1.times).setTimeIfPossible(doubleArg.capture)
		12.34.assertEpsilonEquals(doubleArg.value)

		doubleArg = NativeDoubleArgumentCaptor::forPrimitive
		this.timeService.verify(1.times).evolveTimeIfPossible(doubleArg.capture)
		90.12.assertEpsilonEquals(doubleArg.value)
	}

}
