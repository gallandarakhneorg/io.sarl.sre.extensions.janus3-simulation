/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.extensions.simulation.tests.units.services.time

import io.sarl.sre.extensions.simulation.boot.configs.TimeConfig
import io.sarl.sre.extensions.simulation.services.time.SimulatedTimeService
import io.sarl.sre.internal.SequenceListenerNotifier
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.services.time.TimeListener
import io.sarl.sre.services.time.TimeService
import io.sarl.tests.api.Nullable
import java.util.concurrent.TimeUnit
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.*
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import org.junit.jupiter.api.^extension.ExtendWith

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: SimulatedTimeService test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@Tag("sre-simulation")
class SimulatedTimeServiceTest {

	@Nullable
	var service : SimulatedTimeService
	
	@Nullable
	var listener : TimeListener

	@Nullable
	var logger : LoggingService

	@Nullable
	var config : TimeConfig
	
	@BeforeEach
	def setUp : void {
		this.logger = typeof(LoggingService).mock
		when(this.logger.kernelLogger).thenReturn(typeof(Logger).mock)
		this.config = typeof(TimeConfig).mock
		when(this.config.timeProgressionInLogs).thenReturn(false)
		when(this.config.unit).thenReturn(TimeUnit::SECONDS)
		this.listener = typeof(TimeListener).mock
		val coll = new SmartListenerCollection(new SequenceListenerNotifier)
		this.service = new MyTimeService(this.logger, this.config, coll)
		this.service.addTimeListener(this.listener)
	}

	@Test
	@DisplayName("getTime before time evolution")
	def getTime_beforeEvolution : void {
		0.0.assertEpsilonEquals(this.service.getTime(TimeUnit::MINUTES))
		0.0.assertEpsilonEquals(this.service.getTime(TimeUnit::SECONDS))
		0.0.assertEpsilonEquals(this.service.getTime(TimeUnit::MILLISECONDS))
		verifyNoInteractions(this.listener)
	}

	@Test
	@DisplayName("getTime after time evolution")
	def getTime_afterEvolution : void {
		this.service.evolveTimeIfPossible(4)
		0.066.assertEpsilonEquals(this.service.getTime(TimeUnit::MINUTES))
		4.assertEpsilonEquals(this.service.getTime(TimeUnit::SECONDS))
		4000.0.assertEpsilonEquals(this.service.getTime(TimeUnit::MILLISECONDS))
		var serviceCaptor = typeof(TimeService).forClass
		this.listener.verify(1.times).timeChanged(serviceCaptor.capture)
		this.service.assertSame(serviceCaptor.value)
	}

	@Test
	@DisplayName("getOSTimeFactor before time evolution")
	def getOSTimeFactor_beforeEvolution : void {
		1.0.assertEpsilonEquals(this.service.OSTimeFactor)
		verifyNoInteractions(this.listener)
	}

	@Test
	@DisplayName("evolveTimeIfPossible")
	def evolveTimeIfPossible : void {
		this.service.evolveTimeIfPossible(15)
		
		var serviceCaptor = typeof(TimeService).forClass
		this.listener.verify.timeChanged(serviceCaptor.capture)
		this.service.assertSame(serviceCaptor.value)
	}

	private static class MyTimeService extends SimulatedTimeService {
		
		var ostime = 1500l
		
		def getOSCurrentTime : long {
			this.ostime
		}

		def evolveTimeIfPossible(timeDelta : double = 0.0) : boolean {
			this.ostime = 1654
			return super.evolveTimeIfPossible(timeDelta)
		}
	}

}
