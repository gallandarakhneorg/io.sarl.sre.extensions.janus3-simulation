/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.extensions.simulation.tests.units.boot.configs

import io.sarl.sre.extensions.simulation.boot.configs.TimeConfig
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension
import io.sarl.tests.api.Nullable
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import java.util.concurrent.TimeUnit
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: TimeConfig test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@Tag("sre-simulation")
class TimeConfigTest {

	@Nullable
	var config : TimeConfig
	
	@BeforeEach
	def setUp : void {
		this.config = new TimeConfig
	}
	
	@Test
	@DisplayName("getStartStep")
	def getTimeStep : void {
		TimeConfig::TIME_STEP_VALUE.assertEpsilonEquals(this.config.timeStep)
	}

	@Test
	@DisplayName("setStartStep")
	def setTimeStep : void {
		TimeConfig::TIME_STEP_VALUE.assertEpsilonEquals(this.config.timeStep)
		this.config.timeStep = 123.456
		123.456.assertEpsilonEquals(this.config.timeStep)
	}

	@Test
	@DisplayName("getStartTime")
	def getStartTime : void {
		TimeConfig::START_TIME_VALUE.assertEpsilonEquals(this.config.startTime)
	}

	@Test
	@DisplayName("setStartTime")
	def setStartTime : void {
		TimeConfig::START_TIME_VALUE.assertEpsilonEquals(this.config.startTime)
		this.config.startTime = 123.456
		123.456.assertEpsilonEquals(this.config.startTime)
	}

	@Test
	@DisplayName("getSimulationLoopDelay")
	def getSimulationLoopDelay : void {
		TimeConfig::SIMULATION_LOOP_STEP_DELAY_VALUE.assertEquals(this.config.simulationLoopDelay)
	}

	@Test
	@DisplayName("setSimulationLoopDelay")
	def setSimulationLoopDelay : void {
		TimeConfig::SIMULATION_LOOP_STEP_DELAY_VALUE.assertEquals(this.config.simulationLoopDelay)
		this.config.simulationLoopDelay = 123456
		123456l.assertEquals(this.config.simulationLoopDelay)
	}

	@Test
	@DisplayName("getUnit")
	def getUnit : void {
		TimeUnit::SECONDS.assertEquals(this.config.unit)
	}

	@Test
	@DisplayName("setUnit")
	def setUnit : void {
		TimeUnit::SECONDS.assertEquals(this.config.unit)
		for (tu : TimeUnit::values) {
			this.config.unit = tu
			tu.assertSame(this.config.unit)
		}
	}

}
