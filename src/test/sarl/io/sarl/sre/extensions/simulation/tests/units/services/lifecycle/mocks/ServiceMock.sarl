/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.extensions.simulation.tests.units.services.lifecycle.mocks

import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Agent
import io.sarl.lang.core.SREutils
import io.sarl.sarlspecification.SarlSpecificationChecker
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.extensions.simulation.services.lifecycle.SimulationLifecycleService
import io.sarl.sre.internal.SequenceListenerNotifier
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.lifecycle.AgentCreatorProvider
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.services.lifecycle.AgentState
import io.sarl.sre.services.lifecycle.LifecycleServiceListener
import io.sarl.sre.services.lifecycle.SkillUninstaller
import io.sarl.sre.services.logging.LoggingService
import java.util.UUID
import java.util.concurrent.locks.ReentrantReadWriteLock
import java.util.logging.Logger

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class ServiceMock extends SimulationLifecycleService {

	new (sarlSpecificationChecker : SarlSpecificationChecker,
			agentFactoryProvider : AgentCreatorProvider) {
		super(
			sarlSpecificationChecker,
			agentFactoryProvider,
			new SmartListenerCollection(new SequenceListenerNotifier),
			[typeof(LifecycleServiceListener).mock],
			[typeof(ExternalContextMemberListener).mock],
			typeof(SkillUninstaller).mock,
			typeof(ExecutorService).mock,
			loggingMock,
			configMock)
	}

	private static def loggingMock : LoggingService {
		var kl = typeof(Logger).mock
		var mock = typeof(LoggingService).mock
		when(mock.kernelLogger).thenReturn(kl)
		return mock
	}

	private static def configMock : SreConfig {
		var mock = new SreConfig().spy
		return mock
	}

	override canSpawnAgent : boolean {
		return true
	}

	@SuppressWarnings("use_reserved_sarl_annotation", "unused_local_variable")
	@PrivateAPI(isCallerOnly = true)
	protected override doAgentSpawn(nbAgents : int, spawningAgent : UUID, parent : Context,
		agentClazz : Class<? extends Agent>, params : Object[], agentIds : ()=>UUID) {
		var id = agentIds.apply()
		id.assertNotNull
		var ^agent = new Agent(parent.ID, id)
		var life = new AgentLife [new ReentrantReadWriteLock]
		life.^agent = ^agent
		SREutils::setSreSpecificData(^agent, life)
		life.state = AgentState::ALIVE
		^agent.onAgentCreated
	}

	protected override doAgentKill(^agent : Agent, forceKillable : boolean) : boolean {
		var life = AgentLife::getLife(^agent)
		life.state = AgentState::DEAD
		^agent.onAgentKilled
		return true
	}

}
