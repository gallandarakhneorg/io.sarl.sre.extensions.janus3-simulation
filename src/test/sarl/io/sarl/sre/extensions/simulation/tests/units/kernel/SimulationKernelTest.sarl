/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.extensions.simulation.tests.units.kernel

import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.extensions.simulation.boot.configs.SimulationConfig
import io.sarl.sre.extensions.simulation.kernel.SimulationKernel
import io.sarl.sre.services.IServiceManager
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.services.executor.SreKernelRunnable
import io.sarl.sre.services.lifecycle.LifecycleService
import io.sarl.sre.services.logging.LoggingService
import io.sarl.tests.api.Nullable
import java.lang.Thread.UncaughtExceptionHandler
import java.util.concurrent.ExecutorService
import java.util.logging.Logger
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static extension io.sarl.tests.api.tools.TestAssertions.*
import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*
import org.junit.jupiter.api.^extension.ExtendWith
import io.sarl.tests.api.extensions.ContextInitExtension
import io.sarl.tests.api.extensions.JavaVersionCheckExtension
import io.sarl.sre.test.framework.^extension.PropertyRestoreExtension

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ExtendWith(#[
	typeof(ContextInitExtension),
	typeof(JavaVersionCheckExtension),
	typeof(PropertyRestoreExtension)
])
@DisplayName("unit: RunnableSynchronousEngine test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@Tag("sre-simulation")
class SimulationKernelTest {

	@Nullable
	var serviceManager : IServiceManager

	@Nullable
	var exceptionHandler : UncaughtExceptionHandler

	@Nullable
	var engine : Runnable

	@Nullable
	var executorService : ExecutorService

	@Nullable
	var kernel : SimulationKernel

	@Nullable
	var logging : LoggingService

	@Nullable
	var lifecycle : LifecycleService

	@Nullable
	var context : ContextService

	@Nullable
	var simulationConfig : SimulationConfig

	@Nullable
	var sreConfig : SreConfig
	
	@BeforeEach
	def setUp : void {
		this.logging = typeof(LoggingService).mock
		when(this.logging.kernelLogger).thenReturn(typeof(Logger).mock)
		when(this.logging.platformLogger).thenReturn(typeof(Logger).mock)

		this.lifecycle = typeof(LifecycleService).mock
		this.context = typeof(ContextService).mock

		this.serviceManager = typeof(IServiceManager).mock
		when(this.serviceManager.getService(typeof(Class).any)).thenAnswer [
			var type = it.getArgument(0) as Class<?>
			if (typeof(LoggingService) == type) {
				return this.logging
			}
			if (typeof(LifecycleService) == type) {
				return this.lifecycle
			}
			if (typeof(ContextService) == type) {
				return this.context
			}
			throw new IllegalStateException
		]

		this.exceptionHandler = typeof(UncaughtExceptionHandler).mock

		this.engine = typeof(Runnable).mock

		this.executorService = typeof(ExecutorService).mock

		this.simulationConfig = typeof(SimulationConfig).mock

		this.sreConfig = typeof(SreConfig).mock

		this.kernel = new SimulationKernel(
			[this.serviceManager],
			[this.exceptionHandler],
			[this.sreConfig],
			this.engine,
			this.executorService,
			[this.simulationConfig])
	}

	@Test
	@DisplayName("startKernelAsync")
	def startKernelAsync : void {
		this.kernel.startKernelAsync(this.executorService)
		var arg = typeof(Runnable).forClass
		this.executorService.verify(1.times).execute(arg.capture)
		var executedTask = arg.value
		typeof(SreKernelRunnable).assertInstanceOf(executedTask)
		this.engine.assertSame((executedTask as SreKernelRunnable).source)
	}

	@SuppressWarnings("unused_local_variable")
	@Test
	@DisplayName("startKernelSync")
	def startKernelSync : void {
		this.kernel.startKernelSync()
		var arg = typeof(Runnable).forClass
		this.engine.verify(1.times).run
	}

}
