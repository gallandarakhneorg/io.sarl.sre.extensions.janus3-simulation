/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.extensions.simulation.tests.units.kernel

import io.bootique.config.ConfigurationFactory
import io.sarl.sre.extensions.simulation.boot.configs.SimulationConfig
import io.sarl.sre.extensions.simulation.kernel.SimulationKernel
import io.sarl.sre.services.IServiceManager
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.services.lifecycle.LifecycleService
import io.sarl.sre.services.logging.LoggingService
import io.sarl.tests.api.AbstractSarlTest
import io.sarl.tests.api.Nullable
import java.lang.Thread.UncaughtExceptionHandler
import java.util.concurrent.ExecutorService
import java.util.logging.Logger
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("all")
class SimulationKernelTest extends AbstractSarlTest {

	@Nullable
	var serviceManager : IServiceManager

	@Nullable
	var exceptionHandler : UncaughtExceptionHandler

	@Nullable
	var engine : Runnable

	@Nullable
	var executorService : ExecutorService

	@Nullable
	var configurationFactory : ConfigurationFactory

	@Nullable
	var kernel : SimulationKernel

	@Nullable
	var logging : LoggingService

	@Nullable
	var lifecycle : LifecycleService

	@Nullable
	var context : ContextService

	@Nullable
	var simulationConfig : SimulationConfig

	@Before
	def setUp : void {
		this.logging = typeof(LoggingService).mock
		when(this.logging.kernelLogger).thenReturn(typeof(Logger).mock)
		when(this.logging.platformLogger).thenReturn(typeof(Logger).mock)

		this.lifecycle = typeof(LifecycleService).mock
		this.context = typeof(ContextService).mock

		this.serviceManager = typeof(IServiceManager).mock
		when(this.serviceManager.getService(typeof(Class).any)).thenAnswer [
			var type = it.getArgument(0) as Class<?>
			if (typeof(LoggingService) == type) {
				return this.logging
			}
			if (typeof(LifecycleService) == type) {
				return this.lifecycle
			}
			if (typeof(ContextService) == type) {
				return this.context
			}
			throw new IllegalStateException
		]

		this.exceptionHandler = typeof(UncaughtExceptionHandler).mock

		this.engine = typeof(Runnable).mock

		this.executorService = typeof(ExecutorService).mock

		this.simulationConfig = typeof(SimulationConfig).mock
		
		this.configurationFactory = typeof(ConfigurationFactory).mock
		when(this.configurationFactory.config(typeof(Class).any, anyString)).thenReturn(this.simulationConfig)
		
		this.kernel = new SimulationKernel(this.serviceManager, this.exceptionHandler,
				this.engine, this.executorService, this.configurationFactory)
	}

	@Test
	def startKernelThread : void {
		this.kernel.startKernelThread(this.executorService)
		var arg = ArgumentCaptor::forClass(typeof(Runnable))
		this.executorService.verify(1.times).execute(arg.capture)
		this.kernel.assertSame(arg.value)
	}

	@Test
	def run : void {
		this.kernel.run
		this.engine.verify(1.times).run
	}

}
