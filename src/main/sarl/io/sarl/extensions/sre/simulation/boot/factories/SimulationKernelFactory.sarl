/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.extensions.sre.simulation.boot.factories

import io.bootique.config.ConfigurationFactory
import org.eclipse.xtend.lib.annotations.Accessors
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty

/** 
 * Configuration factory for specifying the simulation kernel configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
@BQConfig("Configuration of the simulation kernel")
class SimulationKernelFactory {

	/** 
	 * Prefix for the configuration entries of the time modules.
	 */
	public static val SIMULATION_KERNEL_PREFIX = SimulationFactories::SIMULATION_ROOT_PROPERTY_PREFIX + "kernel"

	/** 
	 * Name of the property that indicates if the kernel's thread is automatically started when the kernel
	 * is created.
	 * 
	 * @see #AUTOSTART_VALUE
	 */
	public static val AUTOSTART_NAME = SIMULATION_KERNEL_PREFIX + ".autostart"

	/** 
	 * Default value of the property that indicates if the kernel's thread is automatically started when the kernel
	 * is created.
	 * 
	 * @see #AUTOSTART_NAME
	 */
	public static val AUTOSTART_VALUE = true


	@Accessors(PUBLIC_GETTER)
	var autostart : boolean = AUTOSTART_VALUE

	/** Replies the configuration factory for the time.
	 *
	 * @param configFactory the general configuration factory.
	 * @return the time configuration factory.
	 */
	static def getConfigurationFactory(configFactory : ConfigurationFactory) : SimulationKernelFactory {
		assert configFactory !== null
		configFactory.config(typeof(SimulationKernelFactory), SIMULATION_KERNEL_PREFIX)
	}

	/** Change the autostart flag of the kernel.
	 * If this flag is evaluated to true, the kernel is automatically started when the kernel's instance is
	 * created.
	 *
	 * @param autostart {@code true} to start the kernel when the kernel's instance is created.
	 */
	@BQConfigProperty("autostart of the kernel")
	def setAutostart(autostart : boolean) {
		this.autostart = autostart
	}

}
