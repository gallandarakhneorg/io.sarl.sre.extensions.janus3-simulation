/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.extensions.sre.simulation.skills

import com.google.common.collect.Iterables
import io.sarl.lang.core.Event
import io.sarl.sre.skills.EventBus
import java.util.Comparator
import java.util.logging.Logger
import org.arakhne.afc.util.ListUtil

/** 
 * The class in a specific implementation of the event bus that is dedicated to simulation.
 *
 * <p>This event bus synchronizes the events in order to dispatch them when the synchronous engine
 * of the simulator notifies for the dispatching.
 * 
 * @author $Author: sgalland$
 * @author $Author: gcich$
 * @author $Author: lknapen$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
class SynchronizedEventBus extends EventBus {

	var nextStepBuffer = <BufferedEvent>newLinkedList

	var timedBuffer = <BufferedEvent>newArrayList

	override asyncDispatch(^event : Event, logger : Logger) {
		val buf = new BufferedEvent(^event, logger)
		if (buf.time.isNaN) {
			synchronized (this.nextStepBuffer) {
				this.nextStepBuffer += buf
			}
		} else {
			synchronized (this.timedBuffer) {
				ListUtil::add(this.timedBuffer, EventComparator::SINGLETON, buf, true, false)
			}
		}
	}

	/** Fire the buffered events on the bus.
	 *
	 * @param untilTime the time to which (included) all the events must be fired.
	 */
	def fireBufferedEventsOnBus(untilTime : double) : void {
		assert this.nextStepBuffer !== null
		assert this.timedBuffer !== null

		var buffer1 = this.nextStepBuffer
		this.nextStepBuffer = <BufferedEvent>newLinkedList

		if (!buffer1.empty) {
			for (^event : buffer1) {
				immediateDispatch(^event.^event, false, ^event.logger)
			}
		}

		if (!this.timedBuffer.empty) {
			val iterator = this.timedBuffer.iterator
			var index = 0
			while (iterator.hasNext) {
				val ^event = iterator.next
				index++
				val t = ^event.time
				if (t <= untilTime) {
					immediateDispatch(^event.^event, false, ^event.logger)
				} else {
					break
				}
			}
			this.timedBuffer = newArrayList(this.timedBuffer.subList(index, this.timedBuffer.size))
		}
	}

	/** Replies the buffered events.
	 *
	 * @return the buffered events.
	 */
	def getBufferedEvents : Iterable<Event> {
		Iterables.concat(this.nextStepBuffer.map [it.^event], this.timedBuffer.map [it.^event])
	}

	/** 
	 * Storage data structure for buffered events.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.8.0
	 */
	private static class EventComparator implements Comparator<BufferedEvent> {

		public static val SINGLETON = new EventComparator

		def compare(obj1 : BufferedEvent, obj2 : BufferedEvent) : int {
			assert obj1 !== null
			assert obj2 !== null
			return Double::compare(obj2.time, obj1.time)
		}

	}
	
	/** 
	 * Storage data structure for buffered events.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.8.0
	 */
	private static class BufferedEvent {

		public val time : double

		public val ^event : Event

		public val logger : Logger
		
		new (^event : Event, logger : Logger) {
			this.^event = ^event
			this.logger = logger
			if (^event instanceof TimestampedEvent) {
				this.time = ^event.timestamp
			} else {
				this.time = Double::NaN
			}
		}
		
	}

}
