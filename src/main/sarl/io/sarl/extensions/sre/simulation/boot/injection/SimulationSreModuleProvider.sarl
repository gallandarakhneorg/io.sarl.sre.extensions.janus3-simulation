/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.extensions.sre.simulation.boot.injection

import com.google.inject.Module
import io.bootique.BQModuleProvider
import io.sarl.extensions.sre.simulation.boot.factories.SimulationKernelFactory
import io.sarl.extensions.sre.simulation.boot.factories.TimeFactory
import io.sarl.sre.boot.injection.modules.LiteSrePlatformModule
import java.lang.reflect.Type
import java.util.Collection
import java.util.Collections
import java.util.Map

/**
 * Provider of injection modules for the Bootique framework.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
class SimulationSreModuleProvider implements BQModuleProvider {

	override module : Module {
        return new SimulationPlatformModule
    }

	override name : String {
		"Simulation SRE Module"
	}

	override configs : Map<String, Type> {
		#{
			SimulationKernelFactory::SIMULATION_KERNEL_PREFIX -> typeof(SimulationKernelFactory),
			TimeFactory::TIME_PREFIX -> typeof(TimeFactory)
		}
	}

	override overrides : Collection<Class<? extends Module>> {
        Collections::singleton(typeof(LiteSrePlatformModule))
    }

}
