/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2019 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.boot.configs

import io.bootique.annotation.BQConfigProperty
import com.google.inject.AbstractModule
import com.google.inject.Provides
import javax.inject.Singleton
import io.bootique.config.ConfigurationFactory
import com.google.inject.Injector
import io.bootique.BQModuleProvider
import com.google.inject.Module
import java.util.Map
import java.lang.reflect.Type
import java.util.Collections
import io.bootique.BQModule

import static io.sarl.sre.extensions.simulation.boot.configs.SimulationConfig.*
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * Constants and utilities for all simulation factories.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SimulationConfig {

	/** 
	 * Prefix for the configuration entries of the modules.
	 */
	public static val PREFIX = "simulation"

	/** 
	 * Name of the property that indicates if the kernel's thread is automatically started when the kernel
	 * is created.
	 * 
	 * @see #AUTOSTART_VALUE
	 */
	public static val AUTOSTART_NAME = PREFIX + ".autostart"

	/** 
	 * Default value of the property that indicates if the kernel's thread is automatically started when the kernel
	 * is created.
	 * 
	 * @see #AUTOSTART_NAME
	 */
	public static val AUTOSTART_VALUE = true

	@Accessors(PUBLIC_GETTER)
	var autostart : boolean = AUTOSTART_VALUE

	var timeConfig : TimeConfig

	/** Replies the configuration for the SARL simulation environment.
	 * 
	 * @param configFactory the general configuration factory.
	 * @return the configuration.
	 */
	static def getConfiguration(configFactory : ConfigurationFactory) : SimulationConfig {
		assert configFactory !== null
		var factory = configFactory.config(typeof(SimulationConfig), PREFIX)
		return factory
	}

	/** Replies the time configuration.
	 * 
	 * @return the time configuration.
	 */
	def getTime : TimeConfig {
		if (this.timeConfig === null) {
			this.timeConfig = new TimeConfig
		}
		return this.timeConfig
	}

	/** Change the time configuration.
	 * 
	 * @param config the time configuration.
	 */
	@BQConfigProperty("Configuration for the simulation time.")
	def setTime(config : TimeConfig) {
		this.timeConfig = config
	}

	/** Change the autostart flag of the kernel.
	 * If this flag is evaluated to true, the kernel is automatically started when the kernel's instance is
	 * created.
	 * 
	 * @param autostart {@code true} to start the kernel when the kernel's instance is created.
	 */
	@BQConfigProperty("autostart of the kernel")
	def setAutostart(autostart : boolean) {
		this.autostart = autostart
	}

}

/** 
 * Module for creating and configuring the general simulation configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SimulationConfigModule extends AbstractModule {

	override configure : void {
		//
	}

	/** Replies the instance of the simualtion configuration.
	 * 
	 * @param configFactory accessor to the bootique factory.
	 * @param injector the current injector.
	 * @return the path configuration accessor.
	 */
	@Provides
	@Singleton
	def provideSimulationConfig(configFactory : ConfigurationFactory, injector : Injector) : SimulationConfig {
		val config = getConfiguration(configFactory)
		injector.injectMembers(config)
		return config
	}

}

/** Provider of the module for creating and configuring the general simulation configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SimulationConfigModuleProvider implements BQModuleProvider {

	override module : Module {
		return new SimulationConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(SimulationConfig))
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::SimulationConfigModuleProvider_0);
	}

}
