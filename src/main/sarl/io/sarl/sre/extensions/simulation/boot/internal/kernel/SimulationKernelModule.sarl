/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.boot.internal.kernel

import com.google.inject.AbstractModule
import io.sarl.sre.Kernel
import com.google.inject.Singleton
import io.sarl.sre.extensions.simulation.kernel.SimulationKernel
import io.bootique.BQModuleProvider
import com.google.inject.Module
import io.bootique.BQModule

import static extension java.util.Collections.*
import java.util.Collection
import io.sarl.sre.boot.internal.kernel.KernelModule

/** 
 * Module configures the simulation kernel .
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SimulationKernelModule extends AbstractModule {

	protected override configure {
		typeof(Kernel).bind.to(typeof(SimulationKernel)).in(typeof(Singleton))
	}

}

/** Provider of the module for the simulation kernel.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SimulationKernelModuleProvider implements BQModuleProvider {

	override module : Module {
		return new SimulationKernelModule
	}

	override overrides : Collection<Class<? extends Module>> {
		typeof(KernelModule).singletonList
	}
	
	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::SimulationKernelModuleProvider_0);
	}

}

