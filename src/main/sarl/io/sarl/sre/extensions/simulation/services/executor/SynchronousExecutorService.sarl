/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2019 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.services.executor

import io.sarl.sre.services.AbstractSreService
import io.sarl.sre.services.PreReleasableService
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.time.TimeService
import java.util.Collection
import java.util.Deque
import java.util.List
import java.util.Map
import java.util.concurrent.Callable
import java.util.concurrent.Future
import java.util.concurrent.ThreadPoolExecutor
import java.util.concurrent.locks.ReadWriteLock
import java.util.concurrent.locks.ReentrantReadWriteLock
import java.util.logging.Logger
import javax.inject.Inject
import javax.inject.Singleton

import static extension io.sarl.sre.services.executor.JreExecutorUtils.*
import java.util.concurrent.TimeUnit
import java.util.concurrent.ScheduledFuture
import java.util.function.Consumer
import java.util.stream.StreamSupport

/** 
 * Service that executes the tasks synchronously (without threads).
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@Singleton
class SynchronousExecutorService extends AbstractSreService implements ExecutorService, PreReleasableService {

	val jreExecutor : java.util.concurrent.ExecutorService

	val timeService : TimeService

	val taskLock : ReadWriteLock

	val scheduledTasks : Map<Long, Deque<SreScheduledFuture<?>>> = newTreeMap(null)

	val scheduledTaskBuffer : Map<Long, Deque<SreScheduledFuture<?>>> = newTreeMap(null)

	var previousTime : long = 0

	/** Constructor.
	 * 
	 * @param executor the low level executor service.
	 * @param time the time service.
	 */
	@Inject
	new (standardService : java.util.concurrent.ExecutorService, time : TimeService) {
		this.jreExecutor = standardService
		this.timeService = time
		this.taskLock = new ReentrantReadWriteLock
	}

	/** 
	 * Replies the JRE service for scheduled tasks.
	 * 
	 * @return the JRE service.
	 */
	def getExecutorService : java.util.concurrent.ExecutorService {
		this.jreExecutor
	}

	/** Create a task with the given runnable.
	 * 
	 * @param runnable the runnable.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrap(runnable : Runnable, logger : Logger, value : T = null) : FutureRunnable<T> with T {
		if (runnable instanceof FutureRunnable<?>) {
			return runnable as FutureRunnable<T>
		}
		return new FutureRunnable(runnable, logger, value)
	}

	/** Create a task with the given runnable.
	 * 
	 * @param runnable the runnable.
	 * @param time the execution time.
	 * @param delay the delay of execution.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrapScheduled(runnable : Runnable, time : double, delay : long, logger : Logger, period : long,
		interTaskDelay : long) : ScheduledFutureRunnable<T> with T {
		val precision = this.timeService.timePrecision
		var reschedule : (ScheduledFutureRunnable<T>)=>void = null
		if (period > 0) {
			reschedule = [
				var currentTime = this.timeService.getTime(precision)
				var executionDelay = Math::max(period - (currentTime - time) as long, 0)
				scheduleAtFixedRate(logger, executionDelay, period, precision, it)
			]
		} else if (interTaskDelay > 0) {
			reschedule = [
				scheduleWithFixedDelay(logger, interTaskDelay, interTaskDelay, precision, it)
			]
		}
		if (runnable instanceof ScheduledFutureRunnable<?>) {
			runnable.time = time
			runnable.delay = delay
			runnable.timeUnit = precision
			runnable.value = null
			runnable.reschedulingTask = reschedule as (ScheduledFutureRunnable<?>)=>void
			return runnable as ScheduledFutureRunnable<T>
		} else {
			return new ScheduledFutureRunnable(runnable, time, delay, precision, logger, null, reschedule)
		}
	}

	/** Create a task with the given runnable.
	 * 
	 * @param runnable the runnable.
	 * @param time the executino time.
	 * @param delay the delay of execution.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrapScheduled(callable : Callable<T>, time : double, delay : long,
		logger : Logger) : ScheduledFutureCallable<T> with T {
		if (callable instanceof ScheduledFutureCallable<?>) {
			return callable as ScheduledFutureCallable<T>
		}
		return new ScheduledFutureCallable(callable, time, delay, this.timeService.timePrecision, logger)
	}

	/** Create a task with the given callable.
	 * 
	 * @param <T> the type of the returned value.
	 * @param callable the callable.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrap(callable : Callable<T>, logger : Logger) : FutureCallable<T> with T {
		if (callable instanceof FutureCallable<?>) {
			return callable as FutureCallable<T>
		}
		return new FutureCallable(callable, logger)
	}

	/** Create a task with the given consumer.
	 * 
	 * @param <T> the type of the returned value.
	 * @param consumer is the consumer.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrap(consumer : Consumer<? super T>, logger : Logger) : FutureConsumer<? super T> with T {
		if (consumer instanceof FutureConsumer<?>) {
			return consumer as FutureConsumer<? super T>
		}
		return new FutureConsumer(consumer, logger)
	}
	
	override onPreStop {
		shutdown
	}

	protected override onStop {
		shutdown
	}

	private def shutdown {
		var je = getExecutorService
		try {
			je.shutdownNow
		} catch (e : Throwable) {
			e.printStackTrace
		}
	}

	def purge {
		var es = executorService
		if (es instanceof ThreadPoolExecutor) {
			es.purge
		}
	}

	def remove(task : Runnable) : boolean {
		var es = executorService
		var cancel = false
		if (es instanceof ThreadPoolExecutor) {
			cancel = es.remove(task)
		}
		return cancel
	}

	/** Run the schedule tasks.
	 */
	def runScheduledTasks {
		syncBuffer
		var currentTime = this.timeService.getTime(this.timeService.timePrecision) as long
		var scheduledTasks = getScheduledTasks(this.previousTime, currentTime)
		this.previousTime = currentTime
		for (task : scheduledTasks) {
			if (!task.done && !task.cancelled) {
				if (task instanceof ScheduledFutureRunnable<?>) {
					task.run
				} else if (task instanceof ScheduledFutureCallable<?>) {
					task.call
				}
			}
		}
	}

	/** Schedule the given task at the given time in millis.
	 * 
	 * @param time the execution time in millis.
	 * @param command the command to run.
	 */
	protected def scheduleAtTime(time : long, command : SreScheduledFuture<T>) : SreScheduledFuture<T> with T {
		this.taskLock.writeLock.lock
		try {
			var tasks = this.scheduledTaskBuffer.get(time)
			if (tasks === null) {
				tasks = newLinkedList
				this.scheduledTaskBuffer.put(time, tasks)
			}
			tasks += command
		} finally {
			this.taskLock.writeLock.unlock
		}
		return command
	}

	private def syncBuffer {
		this.taskLock.writeLock.lock
		try {
			var iterator = this.scheduledTaskBuffer.entrySet.iterator
			while (iterator.hasNext) {
				var entry = iterator.next
				iterator.remove
				var tasks = this.scheduledTasks.get(entry.key)
				if (tasks === null) {
					tasks = newLinkedList
					this.scheduledTasks.put(entry.key, tasks)
				}
				tasks += entry.value
			}
		} finally {
			this.taskLock.writeLock.unlock
		}
	}

	override getTaskCount : long {
		var nb = 0
		val e0 = this.executorService
		if (e0 instanceof ThreadPoolExecutor) {
			nb = nb + e0.activeCount
		}
		return nb
	}

	/** Replies the scheduled tasks that could be run for the given time.
	 * 
	 * <p>The replied tasks are removed from the schedule.
	 * 
	 * @param startTime the time before the tasks should be consumed but not replied
	 * @param endTime the time until the tasks should be consumed and replied.
	 * @return the scheduled tasks.
	 */
	def getScheduledTasks(startTime : long, endTime : long) : List<SreScheduledFuture<?>> {
		var consumedTasks = newLinkedList
		this.taskLock.readLock.lock
		try {
			var iterator = this.scheduledTasks.entrySet.iterator
			while (iterator.hasNext) {
				var entry = iterator.next
				if (entry.key <= endTime) {
					iterator.remove
					if (entry.key >= startTime) {
						consumedTasks += entry.value
					}
				}
			}
		} finally {
			this.taskLock.readLock.unlock
		}
		return consumedTasks
	}

	/** Replies the scheduled tasks.
	 * 
	 * <p>The replied tasks are not removed from the schedule.
	 * 
	 * @return the scheduled tasks.
	 */
	def getScheduledTasks() : List<SreScheduledFuture<?>> {
		var tasks = newLinkedList
		this.taskLock.readLock.lock
		try {
			for (list : this.scheduledTasks.values) {
				tasks += list
			}
			for (list : this.scheduledTaskBuffer.values) {
				tasks += list
			}
		} finally {
			this.taskLock.readLock.unlock
		}
		return tasks
	}

	override executeAsap(logger : Logger, task : Runnable) : Future<?> {
		var future = task.wrap(logger)
		future.run
		return future
	}

	override executeAsap(logger : Logger, result : T, task : Runnable) : Future<T> with T {
		var future = task.wrap(logger, result)
		future.run
		return future
	}

	override executeAsap(logger : Logger, task : Callable<T>) : Future<T> with T {
		var future = task.wrap(logger)
		future.call
		return future
	}

	def schedule(logger : Logger, delay : long, unit : TimeUnit, command : Runnable) : ScheduledFuture<?> {
		var precision = this.timeService.timePrecision
		var delayInMillis = precision.convert(delay, unit)
		var time = (this.timeService.getTime(precision) + delayInMillis) as long
		return scheduleAtTime(time, command.wrapScheduled(time, delayInMillis, logger, 0, 0));
	}

	def schedule(logger : Logger, delay : long, unit : TimeUnit, command : Callable<T>) : ScheduledFuture<T> with T {
		var precision = this.timeService.timePrecision
		var delayInMillis = precision.convert(delay, unit)
		var time = (this.timeService.getTime(precision) + delayInMillis) as long
		return scheduleAtTime(time, command.wrapScheduled(time, delayInMillis, logger));
	}

	def scheduleAtFixedRate(logger : Logger, initialDelay : long, period : long, unit : TimeUnit,
		command : Runnable) : ScheduledFuture<?> {
		var precision = this.timeService.timePrecision
		var delayInMillis = precision.convert(initialDelay, unit)
		var time = (this.timeService.getTime(precision) + delayInMillis) as long
		var periodInMillis = precision.convert(period, unit)
		return scheduleAtTime(time, command.wrapScheduled(time, delayInMillis, logger, periodInMillis, 0));
	}

	def scheduleWithFixedDelay(logger : Logger, initialDelay : long, delay : long, unit : TimeUnit,
		command : Runnable) : ScheduledFuture<?> {
		var precision = this.timeService.timePrecision
		var delayInMillis = precision.convert(initialDelay, unit)
		var time = (this.timeService.getTime(precision) + delayInMillis) as long
		var periodInMillis = precision.convert(delay, unit)
		return scheduleAtTime(time, command.wrapScheduled(time, delayInMillis, logger, 0, periodInMillis));
	}

	def executeBlockingTasks(logger : Logger, thrownExceptions : boolean = false, task : Collection<Runnable>) {
		executorService.executeInThreadsAndWait(task, thrownExceptions) [ catchErrors, runnable |
			if(catchErrors) runnable.wrap(logger) else runnable.wrap(null)
		]
	}

	def executeBlockingTask(logger : Logger, nbExecutions : int, runGroupSize : int, task : Runnable) : int {
		executorService.executeInThreadsAndWait(task.wrap(logger), nbExecutions, runGroupSize)
	}

	def executeNotBlockingTask(logger : Logger, nbExecutions : int, runGroupSize : int, task : Runnable) {
		executorService.executeInThreadsWithoutWaiting(task.wrap(logger), nbExecutions, runGroupSize)
	}

	override applyBlockingConsumer(logger : Logger, collection : Iterable<T>, task : Consumer<? super T>) with T {
		// Assuming that the task is properly synchronized on the collection.
		StreamSupport::stream(collection.spliterator, true).forEach(task.wrap(logger))
	}

}
