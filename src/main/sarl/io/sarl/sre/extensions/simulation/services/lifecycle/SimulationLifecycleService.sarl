/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.services.lifecycle

import com.google.inject.Injector
import io.sarl.lang.core.Agent
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.sarlspecification.SarlSpecificationChecker
import io.sarl.sre.KernelScope
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.lifecycle.AgentCreatorProvider
import io.sarl.sre.services.lifecycle.InjectionBasedLifecycleService
import io.sarl.sre.services.lifecycle.LifecycleServiceListener
import io.sarl.sre.services.lifecycle.Messages
import io.sarl.sre.services.lifecycle.SkillUninstaller
import io.sarl.sre.services.logging.LoggingService
import java.util.ArrayList
import java.util.Collections
import java.util.Iterator
import java.util.List
import java.util.UUID
import java.util.concurrent.locks.ReadWriteLock
import java.util.concurrent.locks.ReentrantReadWriteLock
import javax.inject.Inject
import javax.inject.Provider
import javax.inject.Singleton
import org.eclipse.xtext.xbase.lib.Functions.Function0

import static io.sarl.sre.services.lifecycle.AgentLife.*
import static java.text.MessageFormat.*

/** 
 * Lifecycle service based on simulation.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@Singleton
class SimulationLifecycleService extends InjectionBasedLifecycleService {

	val agents = <UUID, Agent>newTreeMap(null)

	var agentsToAdd : List<SpawnQuery> = null

	var agentsToRemove : List<Agent> = null

	val lockAdd : ReadWriteLock

	val lockDel : ReadWriteLock

	val lockRepo : ReadWriteLock

	/** 
	 * Constructs the service with the given (injected) injector.
	 * 
	 * @param injector the injector that should be used by this service for creating the agents.
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param skillProvider the provider of skills that should be used to init the agents.
	 * @param globalListeners is the collection of global listeners to use.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param sreConfig the SRE configuration.
	 */
	@Inject
	new (injector : Injector,
		sarlSpecificationChecker : SarlSpecificationChecker,
		skillProvider : DynamicSkillProvider,
		globalListeners : SmartListenerCollection<?>,
		@KernelScope lifecycleListener : Provider<LifecycleServiceListener>,
		@KernelScope externalContextListener : Provider<ExternalContextMemberListener>,
		skillUninstaller : SkillUninstaller,
		executor : ExecutorService,
		logger : LoggingService,
		sreConfig : SreConfig) {
		super(injector, sarlSpecificationChecker, skillProvider, globalListeners, lifecycleListener,
			externalContextListener, skillUninstaller, executor, logger, sreConfig)
		this.lockAdd = new ReentrantReadWriteLock
		this.lockDel = new ReentrantReadWriteLock
		this.lockRepo = new ReentrantReadWriteLock
	}

	/** 
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 * the agents to launch.
	 * @param creator the provider of agent creators that is used when spawning agents.
	 * @param globalListeners is the collection of global listeners to use.
	 * @param lifecycleListener the listener at the platform scale on life cycle events.
	 * @param externalContextListener the listener at the platform scale on context membership events.
	 * @param skillUninstaller the object this is able to uninstall the skills.
	 * @param executor the executor service.
	 * @param logger the logging service.
	 * @param sreConfig the SRE configuration.
	 */
	new (sarlSpecificationChecker : SarlSpecificationChecker,
		creator : AgentCreatorProvider,
		globalListeners : SmartListenerCollection<?>,
		lifecycleListener : Provider<LifecycleServiceListener>,
		externalContextListener : Provider<ExternalContextMemberListener>,
		skillUninstaller : SkillUninstaller,
		executor : ExecutorService,
		logger : LoggingService,
		sreConfig : SreConfig) {
		super(sarlSpecificationChecker, creator, globalListeners, lifecycleListener,
			externalContextListener, skillUninstaller, executor, logger, sreConfig.services.lifecycle)
		this.lockAdd = new ReentrantReadWriteLock 
		this.lockDel = new ReentrantReadWriteLock
		this.lockRepo = new ReentrantReadWriteLock
	}

	protected override spawnAgent(nbAgents : int,
		spawningAgent : UUID,
		parent : Context,
		agentClazz : Class<? extends Agent>,
		params : Object[],
		agentIds : ()=>UUID) : void {
		val ids = new ArrayList(nbAgents)
		if (nbAgents > 0) {
			if (agentIds !== null) {
				for (var i = 0; i < nbAgents; i++) {
					ids += agentIds.apply
				}
			} else {
				for (var i = 0; i < nbAgents; i++) {
					ids += UUID::randomUUID
				}
			}
			var query = new SpawnQuery(spawningAgent, parent, ids, agentClazz, params)
			this.lockAdd.writeLock.lock
			try {
				if (this.agentsToAdd === null) {
					this.agentsToAdd = newLinkedList
				}
				this.agentsToAdd += query
			} finally {
				this.lockAdd.writeLock.unlock
			}
		}
	}

	override killAgent(^agent : Agent, forceKillable : boolean) : boolean {
		assert ^agent !== null
		val agentId = ^agent.ID
		val life = getLifeOrNull(^agent)
		if (life !== null && life.isAlive) {
			if (forceKillable || life.isKillableAgent(agentId)) {
				this.lockDel.writeLock.lock
				try {
					if (this.agentsToRemove === null) {
						this.agentsToRemove = newLinkedList
					}
					this.agentsToRemove += ^agent
				} finally {
					this.lockDel.writeLock.unlock
				}
				return true
			} else {
				this.loggingService.kernelLogger.warning [
					format(Messages::AbstractLifecycleService_1, agentId)
				]
			}
		} else {
			this.loggingService.kernelLogger.warning [
				format(Messages::AbstractLifecycleService_2, agentId)
			]
		}
		return false
	}

	protected override onAgentCreated(^agent : Agent) {
		this.lockRepo.writeLock.lock
		try {
			this.agents.put(^agent.ID, ^agent)
		} finally {
			this.lockRepo.writeLock.unlock
		}
	}

	protected override onAgentKilled(^agent : Agent) {
		this.lockRepo.writeLock.lock
		try {
			this.agents.remove(^agent.ID)
		} finally {
			this.lockRepo.writeLock.unlock
		}
	}
	
	/** Synchronize the agent lists.
	 */
	def synchronizeAgentList {
		var addedAgents : List<SpawnQuery>
		this.lockAdd.readLock.lock
		try {
			addedAgents = this.agentsToAdd
		} finally {
			this.lockAdd.readLock.unlock
		}
		if (addedAgents !== null) {
			this.lockAdd.writeLock.lock
			try {
				addedAgents = this.agentsToAdd
				this.agentsToAdd = null
			} finally {
				this.lockAdd.writeLock.unlock
			}
			if (addedAgents !== null) {
				for (query : addedAgents) {
					spawnAgent(query.agentId.size, query.spawningAgent, query.parent, query.agentClazz,
						query.params, new AgentIdsProvider(query.agentId))
				}
			}
		}
		var removedAgents : List<Agent>
		this.lockDel.readLock.lock
		try {
			removedAgents = this.agentsToRemove
		} finally {
			this.lockDel.readLock.unlock
		}
		if (removedAgents !== null) {
			this.lockDel.writeLock.lock
			try {
				removedAgents = this.agentsToRemove
				this.agentsToRemove = null
			} finally {
				this.lockDel.writeLock.unlock
			}
			if (removedAgents !== null) {
				for (^agent : removedAgents) {
					super.killAgent(^agent, false)
				}
			}
		}
	}

	/** Replies if at least one agent is running.
	 *
	 * @return {@code true} if an agent is running. Otherwise {@code false}.
	 */
	def synchronized hasAgent : boolean {
		!this.agents.empty || (this.agentsToAdd !== null && !this.agentsToAdd.empty)
	}

	/** Replies the running agents.
	 * 
	 * @return the running agents.
	 */
	def getAgents : Iterable<Agent> {
		Collections::unmodifiableCollection(this.agents.values)
	}

	protected override isEmptyRootContext(context : Context) : boolean {
		super.isEmptyRootContext(context)
		&& (this.agentsToAdd === null || this.agentsToAdd.empty)
	}

	/** Replies the agent with the identifier.
	 * 
	 * @return the agent or {@code null} if no agent exists with the given identifier.
	 */
	def getAgent(id : UUID) : Agent {
		assert id !== null
		this.agents.get(id)
	}
	
	/** 
	 * Query for creating agents.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.10
	 */
	private static final class SpawnQuery {

		public val spawningAgent : UUID
		public val parent : Context
		public val agentId : List<UUID>
		public val agentClazz : Class<? extends Agent>
		public val params : Object[]

		new (spawningAgent : UUID, parent : Context, agentId : List<UUID>,
			agentClazz : Class<? extends Agent>, params : Object[]) {
			this.spawningAgent = spawningAgent
			this.parent = parent
			this.agentId = agentId
			this.agentClazz = agentClazz
			this.params = params
		}

		override toString : String {
			return this.agentClazz.name
		}

	}

	/** 
	 * A dynamic provider of UUID for the newly created agents.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	protected static class AgentIdsProvider implements Function0<UUID> {

		val agentIds : Iterator<UUID>

		new (agentIds : List<UUID>) {
			this.agentIds = agentIds.iterator
		}

		synchronized def apply : UUID {
			if (this.agentIds.hasNext) {
				val id = this.agentIds.next
				if (id !== null) {
					return id
				}
			}
			return UUID::randomUUID
		}

	}

}
