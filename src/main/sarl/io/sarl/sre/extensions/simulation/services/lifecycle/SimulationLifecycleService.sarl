/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.services.lifecycle

import io.sarl.lang.core.Agent
import io.sarl.sre.services.lifecycle.InjectionBasedLifecycleService
import java.util.UUID
import javax.inject.Singleton
import java.util.List
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.lifecycle.SpawnResult
import java.util.ArrayList
import java.util.Collections
import java.util.logging.Level

/**
 * Lifecycle service based on simulation.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@Singleton
class SimulationLifecycleService extends InjectionBasedLifecycleService {

	val agents = <UUID, Agent>newTreeMap(null)

	var agentsToAdd : List<SpawnQuery> = null

	var agentsToRemove : List<Agent> = null
	
	synchronized override spawnAgent(nbAgents : int, spawningAgent : UUID, parent : Context, agentId : UUID,
		agentClazz : Class<? extends Agent>, params : Object*) : SpawnResult {
		val ids = new ArrayList(nbAgents)
		if (nbAgents > 0) {
			if (agentId !== null) {
				ids += agentId
				for (var i = 1; i < nbAgents; i++) {
					ids += UUID::randomUUID
				}
			} else {
				for (var i = 0; i < nbAgents; i++) {
					ids += UUID::randomUUID
				}
			}
			var query = new SpawnQuery(spawningAgent, parent, ids, agentClazz, params)
			if (this.agentsToAdd === null) {
				this.agentsToAdd = newLinkedList
			}
			this.agentsToAdd += query
		}
		return new SpawnResult(ids, Collections::emptyList)
	}

	synchronized override killAgent(^agent : Agent) : boolean {
		assert ^agent !== null
		if (^agent.isKillableAgent) {
			if (this.agentsToRemove === null) {
				this.agentsToRemove = newLinkedList
			}
			this.agentsToRemove += ^agent
			return true
		}
		return false
	}

	protected synchronized override onAgentCreated(^agent : Agent) {
		synchronized (this.agents) {
			this.agents.put(^agent.ID, ^agent)
		}
	}

	protected synchronized override onAgentKilled(^agent : Agent) {
		synchronized (this.agents) {
			this.agents.remove(^agent.ID)
		}
	}
	
	/** Synchronize the agent lists.
	 */
	synchronized def synchronizeAgentList {
		if (this.agentsToAdd !== null) {
			var addedAgents = this.agentsToAdd
			this.agentsToAdd = null
			for (query : addedAgents) {
				var result = spawnAgent(query.agentId.size, query.spawningAgent, query.parent, query.agentClazz, query.params) [
					assert it >= 0
					if (it < query.agentId.size) {
						return query.agentId.get(it)
					}
					return UUID::randomUUID
				]
				if (result.error !== null) {
					loggingService.kernelLogger.log(Level::SEVERE, result.error.localizedMessage, result.error)
				}
			}
		}
		if (this.agentsToRemove !== null) {
			var removedAgents = this.agentsToRemove
			this.agentsToRemove = null
			for (^agent : removedAgents) {
				super.killAgent(^agent)
			}
		}
	}

	/** Replies if an agents is running.
	 *
	 * @return {@code true} if an agent is running. Otherwise {@code false}.
	 */
	def synchronized hasAgent : boolean {
		!this.agents.empty
	}

	/** Replies the running agents.
	 * 
	 * @return the running agents.
	 */
	def getAgents : Iterable<Agent> {
		Collections::unmodifiableCollection(this.agents.values)
	}

	/** Replies the agent with the identifier.
	 * 
	 * @return the agent or {@code null} if no agent exists with the given identifier.
	 */
	def getAgent(id : UUID) : Agent {
		assert id !== null
		this.agents.get(id)
	}
	
	/** 
	 * Query for creating agents.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.10
	 */
	private static final class SpawnQuery {

		public val spawningAgent : UUID
		public val parent : Context
		public val agentId : List<UUID>
		public val agentClazz : Class<? extends Agent>
		public val params : Object[]

		new (spawningAgent : UUID, parent : Context, agentId : List<UUID>,
			agentClazz : Class<? extends Agent>, params : Object[]) {
			this.spawningAgent = spawningAgent
			this.parent = parent
			this.agentId = agentId
			this.agentClazz = agentClazz
			this.params = params
		}

	}

}
