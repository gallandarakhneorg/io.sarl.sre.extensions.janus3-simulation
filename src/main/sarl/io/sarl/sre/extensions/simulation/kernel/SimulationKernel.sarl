/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.extensions.simulation.kernel

import com.google.inject.Inject
import io.bootique.config.ConfigurationFactory
import io.sarl.sre.Kernel
import io.sarl.sre.services.IServiceManager
import java.lang.Thread.UncaughtExceptionHandler
import java.util.concurrent.ExecutorService
import javax.inject.Singleton
import io.sarl.sre.extensions.simulation.engine.SynchronousEngine
import io.sarl.sre.extensions.simulation.boot.configs.SimulationConfig

/** 
 * This class represents the Kernel of the SRE simulation platform.
 * 
 * <p><strong>The Kernel is a singleton.</strong>
 * 
 * <p>The Kernel is assimilated to an agent that is omniscient and distributed other the network.
 * It is containing all the other agents.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@Singleton
class SimulationKernel extends Kernel implements Runnable {
	
	val synchronousEngine : Runnable

	@Inject
	new (serviceManager : IServiceManager, exceptionHandler : UncaughtExceptionHandler,
		@SynchronousEngine engine : Runnable, executorService : ExecutorService,
		configFactory : ConfigurationFactory) {
		super(serviceManager, exceptionHandler)

		// TODO Remove the following line when the framework is ready for the release
		this.logger.warning(Messages::SimulationKernel_0)

		assert engine !== null
		this.synchronousEngine = engine
		var cfg = SimulationConfig.getConfiguration(configFactory)
		if (cfg.autostart) {
			executorService.startKernelThread
		}
	}

	/** Start the kernel thread with the given executor service.
	 *
	 * @param executorService the service that could be used for starting the kernel thread.
	 */
	def startKernelThread(executorService : ExecutorService) {
		executorService.execute(this)
	}

	override run {
		this.synchronousEngine.run
	}

}
